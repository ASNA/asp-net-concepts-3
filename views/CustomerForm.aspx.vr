Using System
Using System.Data
Using System.Web.UI.WebControls

BegClass CustomerForm Partial(*Yes) Access(*Public) Extends(System.Web.UI.Page)

    DclDB DGDB 
    DclFld dt Type(DataTable) 

    DclFld crud Type(CustomerCrud) 
    DclFld StateHelper Type(AppStateHelpers) New(*This.Context) 

    BegSr Page_Load Access(*Private) Event(*This.Load)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)
            
        DclFld CustomerNumber Type(*Integer4) 
        DclFld statesList Type(ListItemCollection) 

        DGDB.DBName = StateHelper.GetApplicationValueAsString('dbname') 
        // DGDB.User = StateHelper.GetSessionValueAsString('user') 
        // DGDB.Password = StateHelper.GetSessionValueAsString('password') 

        Connect DGDB 
        crud = *New CustomerCrud(DGDB)

        If (NOT Page.IsPostBack)
            CustomerNumber = StateHelper.GetSessionValueAsInt32('customer-number') 
            dt = Crud.ReadCustomer(CustomerNumber) 

            // Access to fields is available through the zeroth row of the DataTable.
            // Set page title.
            *This.Title = dt.Rows[0]['CMName'].ToString()

            // Alternative way of populating a ListItemCollection dynamically. 
            DclFld lih Type(ASNA.DataGateHelper.ListItemHelper) New(*This.DGDB) 
            lih.LoadList('examples', 'states', 'state', 'abbrev')
            CrudHelpers.LoadListControl(CMState, lih.ListItems) 
                       
            // Use hand-written class to populate a ListItemCollection.
            // StatesList = (*New StateList(DGDB)).GetList()
            // CrudHelpers.LoadListControl(CMState, StatesList)

            CrudHelpers.PopulateUIFromDataRow(*This, dt) 
        Else
        EndIf 
    EndSr 

    BegSr Page_Unload Access(*Private) Event(*This.Unload)
        DclSrParm sender Type(*Object)
        DclSrParm e Type(System.EventArgs)

        Disconnect DGDB 
    EndSr

	BegSr buttonUpdateCustomer_Click Access(*Private) Event(*This.buttonUpdateCustomer.Click)
		DclSrParm sender Type(*Object)
		DclSrParm e Type(System.EventArgs)

        DclFld CustomerNumber Type(*Integer4) 
        DclFld dtClone Type(DataTable) 

        If NOT *This.IsValid
            LeaveSr 
        EndIf 

        CustomerNumber = Convert.ToInt32(CMCustNo.Text) 

        dt = Crud.ReadCustomer(CustomerNumber)       
        CrudHelpers.PopulateDataRowFromUI(*This, dt) 
        Crud.UpdateCustomer(CustomerNumber, dt) 

        Session['first-customer-name'] = CMName.Text
        Session['first-customer-number'] = CMCustNo.Text
        Response.Redirect("CustomerList.aspx") 
	EndSr

	BegSr buttonCancel_Click Access(*Private) Event(*This.buttonCancel.Click)
		DclSrParm sender Type(*Object)
		DclSrParm e Type(System.EventArgs)

        Session['first-customer-name']   = Session['first-customer-name'] 
        Session['first-customer-number'] = Session['first-customer-number']

        Response.Redirect("CustomerList.aspx") 
    EndSr

	BegSr CustomValidator1_ServerValidate Access(*Private) Event(*This.customvalidatorCMName.ServerValidate)
		DclSrParm source Type(*Object)
		DclSrParm args Type(System.Web.UI.WebControls.ServerValidateEventArgs)
		
        If CMName.Text.Trim().ToLower() = "neil young"
            args.IsValid = *False 
            customvalidatorCMName.ErrorMessage = "Sorry, the name can't be Neil Young!" 
        EndIf 
	EndSr
EndClass
