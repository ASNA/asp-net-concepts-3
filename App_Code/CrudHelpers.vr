Using System
Using System.Data
Using System.Collections.Specialized
Using System.Text
Using System.Web.UI
Using System.Web.UI.WebControls

/*
 | These routines are all helper routines to make it easier to populate ASP.NET WebForms
 | and to move data from the WebForm back to the database.
 | These routines are all shared (static).
 */
BegClass CrudHelpers Access(*Public)

    /*
     | This is primarily for debugging:
     | Return a formatted string showing field names and values for the given DataRow. 
     | Two overloads: first defaults to zeroth DataRow, second
     | uses zero-based row position provided. 
     */
    BegFunc GetDataRowValuesForDebugging Type(*String)  Access(*Public) Shared(*Yes) 
        DclSrParm dt Type(DataTable) 

        LeaveSr GetDataRowValuesForDebugging(dt, 0) 
    EndFunc 

    BegFunc GetDataRowValuesForDebugging Type(*String)  Access(*Public) Shared(*Yes) 
        DclSrParm dt Type(DataTable) 
        DclSrParm Row Type(*Integer4) 
        
        DclFld sb Type(StringBuilder) New()
        DclFld dr Type(DataRow) 

        dr = dt.Rows[Row]

        ForEach Field Type(*String) Collection(CrudHelpers.GetDataFieldNames(dt))
            sb.AppendLine(String.Format("{0,-16} = {1}", Field, dr[Field]))  
        EndFor 

        LeaveSr sb.ToString()
    EndFunc 

    /*
     | Get field names from a DataTable's Columns collecton as a string collection. 
     | Field names are returned as lower case.
     */
    BegFunc GetDataFieldNames Type(StringCollection) Access(*Public) Shared(*Yes) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection) New()
        DclFld dc Type(DataColumn) 
        DclFld i Type(*Integer4) 

        For Index(i = 0) To(dt.Columns.Count - 1)
            dc = dt.Columns[i]
            FieldNameList.Add(dt.Columns[i].ColumnName.ToLower())
        EndFor 

        LeaveSr FieldNameList 
    EndFunc 
   
    /*
     | For each field name in the FieldNameList, update the ASP.NET control
     | on the form with that field name as its Id. 
     */
    BegSr PopulateUIFromDataRow Access(*Public)  Shared(*Yes) 
        DclSrParm Parent Type(Control) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection)

        FieldNameList = GetDataFieldNames(dt)

        ForEach FieldName Type(*String) Collection(FieldNameList) 
            PopulateControlValue(Parent, FieldName, dt.Rows[0]) 
        EndFor  
    EndSr 

    /*
     | For a given field name update the value of the ASP.NET control
     | on the form with that field name as its Id. 
     */
    BegSr PopulateControlValue Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm FldName Type(*String) 
        DclSrParm dr Type(DataRow) 

        DclFld ctrl Type(Control) 

        /* 
         | This is a subset of the UI controls available. For example,
         | it does not include CheckBoxList and RadioButtonList controls.
         | For those controls, and other others not included, populate 
         | those controls manually after calling this method to populate 
         | the other controls.
         */

        ctrl = FindControlRecursive(Parent, GetPrefixedControlId(FldName)) 
        If ctrl <> *Nothing 
            If ctrl *Is TextBox 
                (ctrl *As TextBox).Text = dr[fldName].ToString().Trim()
            ElseIf ctrl *Is Label
                (ctrl *As Label).Text = dr[fldName].ToString().Trim()
            Elseif ctrl *Is RadioButton
                (ctrl *As RadioButton).Text =  dr[fldName].ToString().Trim() = '1'
            Elseif ctrl *Is CheckBox 
                (ctrl *As CheckBox).Checked = dr[fldName].ToString().Trim() = '1'
            Elseif ctrl *Is ListControl
                (ctrl *As ListControl).SelectedValue = dr[fldName].ToString().Trim()
            EndIf 
        EndIf 
    EndSr 

    /*
     | For each field name in the FieldNameList, populate the corresponding
     | zeroth DataRow field value with the like-named ASP.NET control value.
     */
    BegSr PopulateDataRowFromUI Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection)

        FieldNameList = GetDataFieldNames(dt)

        ForEach FieldName Type(*String) Collection(FieldNameList) 
            PopulateDataRowField(Parent, FieldName, dt.Rows[0]) 
        EndFor  
    EndSr 

    /*
     | For a given field name, populate the corresponding
     | DataRow field value with the like-named ASP.NET control value.     
     */
    BegSr PopulateDataRowField Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm FldName Type(*String) 
        DclSrParm dr Type(DataRow) 

        DclFld ctrl Type(Control) 

        /* 
         | This is a subset of the UI controls available. For example,
         | it does not include CheckBoxList and RadioButtonList controls.
         | For those controls, and other others not included, populate 
         | the necessary DataRow fields manually after calling this method 
         | to populate the other DataRow fields. 
         */

        ctrl = FindControlRecursive(Parent, GetPrefixedControlId(FldName)) 
        If ctrl <> *Nothing 
            If ctrl *Is TextBox 
                 dr[fldName] = (ctrl *As TextBox).Text.Trim()
            ElseIf ctrl *Is Label
                 dr[fldName] = (ctrl *As Label).Text.Trim()
            Elseif ctrl *Is RadioButton
                 dr[fldName] = (ctrl *As RadioButton).Checked ? '1' : '0'
            Elseif ctrl *Is CheckBox 
                dr[fldName] = (ctrl *As CheckBox).Checked ? '1' : '0'
            Elseif ctrl *Is ListControl
                dr[FldName] = (ctrl *As ListControl).SelectedValue
            EndIf 
        EndIf 
    EndSr

    /*
     | Find a control with given Id in the parent control. The parent 
     | control must derive from System.Web.UI.Control.
     */
    BegFunc FindControlRecursive Type(Control) Access(*Public) Shared(*Yes)  
        DclSrParm parent Type(Control) 
        DclSrParm id Type(*String) 

        DclFld foundControl Type(Control) 

        If parent.id <> *Nothing AND parent.id.ToLower() = id
            Leavesr parent 
        EndIf 

        ForEach ctrl Type(Control) Collection(parent.Controls)
            foundControl = FindControlRecursive(Ctrl, id) 
            If foundControl <> *Nothing
                LeaveSr foundControl 
            EndIf 
        EndFor 

        LeaveSr *Nothing 
    EndFunc 

    BegFunc GetPrefixedControlId Type(*String) Shared(*Yes)
        DclSrParm id Type(*String) 

        LeaveSr ('field_' + Id).ToLower() 
    EndFunc 

    /*
     | Populate the incoming ListControl with the incoming ListItemCollection.
     | ListControls are: BulletedList, ListBox, DropDownList, CheckBoxList, 
     | and RadioButtonList.
     */
    BegSr LoadListControl Access(*Public) Shared(*Yes)  
        DclSrParm ListControlInstance Type(ListControl) 
        DclSrParm lic Type(ListItemCollection)

        // Use ListItem Text property for text and ListItem Value property for value.
        ListControlInstance.DataTextField  = "Text"
        ListControlInstance.DataValueField = "Value"

        ListControlInstance.DataSource = lic
        ListControlInstance.DataBind()
    EndSr    

EndClass
