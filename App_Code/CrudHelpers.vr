Using System
Using System.Data
Using System.Collections.Specialized
Using System.Text
Using System.Web.UI
Using System.Web.UI.WebControls

/*
 | These routines are all helper routines to make it easier to populate ASP.NET WebForms
 | and to move data from the WebForm back to the database.
 | These routines are all shared (static).
 */
BegClass CrudHelpers Access(*Public)

    /*
     | Get field names from a DataTable as a string collection. 
     */
    BegFunc GetDataFieldNames Type(StringCollection) Access(*Public) Shared(*Yes) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection) New()
        DclFld dc Type(DataColumn) 
        DclFld i Type(*Integer4) 

        For Index(i = 0) To(dt.Columns.Count - 1)
            dc = dt.Columns[i]
            FieldNameList.Add(dt.Columns[i].ColumnName.ToLower())
        EndFor 

        LeaveSr FieldNameList 
    EndFunc 

    /*
     | Return a formatted string showing field names and values for the given DataRow. This
     | is for debugging purposes. 
     */
    BegFunc GetDataRowValuesForDebugging Type(*String)  Access(*Public) Shared(*Yes) 
        DclSrParm dt Type(DataTable) 
        
        DclFld sb Type(StringBuilder) New()
        DclFld dr Type(DataRow) 

        dr = dt.Rows[0]

        ForEach Field Type(*String) Collection(CrudHelpers.GetDataFieldNames(dt))
            sb.AppendLine(String.Format("{0,-16} = {1}", Field, dr[Field]))  
        EndFor 

        LeaveSr sb.ToString()
    EndFunc 

    /*
     | Update zeroth DataRow in the incoming DataSet with the zeroth DataRow 
     | in the incoming DataTable. 
     */
    BegSr UpdateFieldValues Access(*Public) Shared(*Yes) 
        DclSrParm MemFileDataSet Type(DataSet) 
        DclSrParm NewFieldValues Type(DataTable) 

        DclFld dt Type(DataTable) 
        DclFld dr Type(DataRow) 

        dt = MemFileDataSet.Tables[0]
        dr = dt.Rows[0]

        ForEach Field Type(*String) Collection(CrudHelpers.GetDataFieldNames(dt))
            dr[field] = NewFieldValues.Rows[0][field].ToString()
        EndFor 
    EndSr 

    // -------------------------------------------------
    
    /*
     | For each field name in the FieldNameList, update the ASP.NET control
     | on the form with that field name as its Id. 
     */
    BegSr PopulateUI Access(*Public)  Shared(*Yes) 
        DclSrParm Parent Type(Control) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection)

        FieldNameList = GetDataFieldNames(dt)

        ForEach FieldName Type(*String) Collection(FieldNameList) 
            PopulateControlValue(Parent, FieldName, dt.Rows[0]) 
        EndFor  
    EndSr 

    /*
     | For a given field name update the ASP.NET control
     | on the form with that field name as its Id. 
     */
    BegSr PopulateControlValue Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm FldName Type(*String) 
        DclSrParm dr Type(DataRow) 

        DclFld ctrl Type(Control) 

        ctrl = FindControlRecursive(Parent, FldName) 
        If ctrl <> *Nothing 
            If ctrl *Is TextBox 
                (ctrl *As TextBox).Text = dr[fldName].ToString().Trim()
            Elseif ctrl *Is RadioButton
                (ctrl *As RadioButton).Text =  dr[fldName].ToString().Trim() = '1'
            Elseif ctrl *Is CheckBox 
                (ctrl *As CheckBox).Checked = dr[fldName].ToString().Trim() = '1'
            Elseif ctrl *Is ListControl
                (ctrl *As ListControl).SelectedValue = dr[fldName].ToString().Trim()
            EndIf 
        EndIf 
    EndSr 


    /*
     | For each field name in the FieldNameList, populate the corresponding
     | zeroth DataRow field value with the like-named ASP.NET control value.
     */
    BegSr PopulateFormat Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm dt Type(DataTable) 

        DclFld FieldNameList Type(StringCollection)

        FieldNameList = GetDataFieldNames(dt)

        ForEach FieldName Type(*String) Collection(FieldNameList) 
            PopulateFormatField(Parent, FieldName, dt.Rows[0]) 
        EndFor  
    EndSr 

    /*
     | For a given field name, populate the corresponding
     | DataRow field value with the like-named ASP.NET control value.     
     */
    BegSr PopulateFormatField Access(*Public) Shared(*Yes)  
        DclSrParm Parent Type(Control) 
        DclSrParm FldName Type(*String) 
        DclSrParm dr Type(DataRow) 

        DclFld ctrl Type(Control) 

        ctrl = FindControlRecursive(Parent, FldName) 
        If ctrl <> *Nothing 
            If ctrl *Is TextBox 
                 dr[fldName] = (ctrl *As TextBox).Text.Trim()
            Elseif ctrl *Is RadioButton
                 dr[fldName] = (ctrl *As RadioButton).Checked ? '1' : '0'
            Elseif ctrl *Is CheckBox 
                dr[fldName] = (ctrl *As CheckBox).Checked ? '1' : '0'
            Elseif ctrl *Is ListControl
                dr[FldName] = (ctrl *As ListControl).SelectedValue
            EndIf 
        EndIf 
    EndSr

    /*
     | Find a control with given Id in the parent control. When this routine is 
     | called from PopulateFormField, the entire page is the parent that is 
     | searched for the control.
     */
    BegFunc FindControlRecursive Type(Control) Access(*Public) Shared(*Yes)  
        DclSrParm parent Type(Control) 
        DclSrParm id Type(*String) 

        DclFld foundControl Type(Control) 

        If parent.id <> *Nothing AND parent.id.ToLower() = id.ToLower()
            Leavesr parent 
        EndIf 

        ForEach ctrl Type(Control) Collection(parent.Controls)
            foundControl = FindControlRecursive(Ctrl, id) 
            If foundControl <> *Nothing
                LeaveSr foundControl 
            EndIf 
        EndFor 

        leaveSr *Nothing 
    EndFunc 

    /*
     | Populate the incoming ListControl with the incoming ListItemCollection.
     | ListControls are: BulletedList, ListBox, DropDownList, CheckBoxList, and RadioButtonList.
     */
    BegSr LoadListControl Access(*Public) Shared(*Yes)  
        DclSrParm ListControlInstance Type(ListControl) 
        DclSrParm lic Type( ListItemCollection )
       
        // When using data binding, the control
        // loses track of what the "columns" in the data
        // source represent.
        // These two lines of code ensure the Text and Value
        // fields are appropriately synchronized between the
        // bound list and the dropdown control.
        ListControlInstance.DataTextField  = "Text"
        ListControlInstance.DataValueField = "Value"

        ListControlInstance.DataSource = lic
        ListControlInstance.DataBind()
    EndSr    

EndClass
