Using System
Using System.Data
Using System.Collections.Specialized
Using System.Web.UI
Using System.Web.UI.WebControls

BegClass CustomerCrud Access(*Public)

    DclDB DGDB DBName( "*Public/DG Net Local" ) 
                
    DclDiskFile Customer +
            Type(*Update) + 
            Org(*Indexed) + 
            File("examples/cmastnewl1") +
            DB(DGDB) +
            ImpOpen(*No)  

    DclMemoryFile MemFile +
          DBDesc( "*Public/DG Net Local" ) +
          FileDesc( "Examples/CMastNewL1" ) +          
          RnmFmt( MemFileR ) + 
          Access(*Public) 

    BegConstructor Access(*Public)
        DclSrParm DGDB Type(ASNA.VisualRPG.Runtime.Database) 

        *This.DGDB = DGDB
    EndConstructor 
    
    // Open - Connect to DB and open files.
    BegSr Open Access(*Public)
        If NOT DGDB.IsOpen
            Connect DGDB
        EndIf             
        If NOT Customer.IsOpen
            Open Customer
        EndIf 
    EndSr

    // Close - Close all files
    BegSr Close Access(*Public)
        Close *All
    EndSr

    BegSr UpdateCustomer Access(*Public) 
        DclSrParm CustomerNumber Like(CMCustNo) 
        DclSrParm NewFieldValues Type(DataTable) 

        DclFld debugText1 Type(*String)
        DclFld debugText2 Type(*String)
       
        *This.Open()

        // This method assumes that DataRow[0] has values 
        // from the UI. 

        Chain Customer Key(CustomerNumber) 
        If Customer.IsFound() 
            // DataRow[0] = new values from UI. 
            Write MemFile
            // After this write, DataRow[1] = existing values on disk.
            // See new values.
            debugText1 = CrudHelpers.GetDataRowValuesForDebugging(MemFile.DataSet.Tables[0], 0) 
            // See old values. 
            debugText2 = CrudHelpers.GetDataRowValuesForDebugging(MemFile.DataSet.Tables[0], 1) 

            // Read the zeroth record (as a one-based value) to refresh fields in record
            // buffer with new values.
            Chain MemFile Key(1) // Chains are one-based, not zero based! 
            Update Customer 
        EndIf 
        
        *This.Close()
    EndSr 

    BegFunc ReadCustomer Type(DataTable) Access(*Public) 
        DclSrParm CustomerNumber Like(CMCustNo) 
        
        *This.Open()

        Chain Customer Key(CustomerNumber) 
        If Customer.IsFound() 
            Write MemFile
            LeaveSr MemFile.DataSet.Tables[0]
        Else
            LeaveSr *Nothing 
        EndIf 

        *This.Close() 
    EndFunc 

EndClass